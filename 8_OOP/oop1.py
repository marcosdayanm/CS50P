class Student:
    # this is the function called when we perform the inicialization of the attributes of a class, with the constructor, its name is __init__ because the authors of Python decided that
    # El par√°metro "self", que podr√≠a tener cualquier otro nombre pero por convenci√≥n se pone siempre self, tiene que se rel primer argumento del m√©todo, y sirve para que podamos tener acceso al objeto que se cre√≥ en ese mismo instante, porque sino no podr√≠amos tener acceso a peste, es algo por convenci√≥n en Python que funciona de √©sta forma
    # Lo que si se tiene que hacer es definir nuestro propio init method para nombrar los atributos como nosotros quetramos, entre otras cosas
    def __init__(self, n, h):
        # De √©sta manera, estamos instalando √©stos atributos en nuestro objeto vac√≠o creado por el m√©todo, y los estamos almacenando en el espacio de la memoria designado cuando se llama al constructor desde el mail program
        self.name = n
        self.house = h # √©stab l√≠nea tambi√©en va a llamar al setter, entonces podremos tener todo el error checking en un solo lugar


    def __str__(self):   # M√©todo que Python ejecuta autom√°ticamente al printear el objeto en s√≠
        return f"{self.name} from {self.house}"

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, n):
        if not n:
            raise ValueError("Missing name")
        self._name = n


    # Getter: Funci√≥n que da un atributo
    @property # syntax de getter
    def house(self):
        return self._house # √©sto se pone de √©sta manera para que Python no se confunda entre el atributo y la funci√≥n, podr√≠a ser cualquier cosa pero por convenci√≥n es un gui√≥n bajo

    # Setter: Funci√≥n que determina un atributo
    @house.setter # syntax de setter
    def house(self, h):
        if h not in ['Gryffindor', 'Ravernclaw', 'Hufflepuff', 'Slytherin']:
            raise ValueError("Invalid house")
        self._house = h

"""
    def charm(self):
        match self.patronus:
            case "Stag":
                return "üê¥"
            case "Koala":
                return "ü¶•"
            case "Gorilla":
                return "ü¶ç"
            case _:
                return "Not found yet"
"""



def main():
    student = get_student()
    #student.house = "Number Four, Privet Drive"  # ac√°, la instancia de Python va a seleccionar el m√©todo "Setter" porque identifica el signo de igual, que quiere settear, no obtener. Lo hace porque lo definimos de √©sta forma con los m√©todos en la clase
    print(student)

    student


def get_student():
    name = input('Name: ')
    house = input('House: ')
    return Student(name, house)  # constructor call (instanciate a student object for me) using the student class as a template, so every student has the same structure


if __name__ == '__main__':
    main()







